// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Boid
{
    float3 position;
    float3 velocity;
};

StructuredBuffer<Boid> boids;
RWStructuredBuffer<float4x4> matrices;

float3 offset;

[numthreads(10, 1, 1)]
void CSMain (uint id : SV_DispatchThreadID)
{
    float scale = 1.0f;
    Boid b = boids[id];
    
    float4x4 result = float4x4
    (
        1.0, 0.0, 0.0, 0.0,
        0.0, 1.0, 0.0, 0.0,
        0.0, 0.0, 1.0, 0.0,
        0.0, 0.0, 0.0, 1.0
    );
    
    float4x4 scaleMatrix = float4x4
    (
        scale, 0.0,   0.0,   0.0,
        0.0,   scale, 0.0,   0.0,
        0.0,   0.0,   scale, 0.0,
        0.0,   0.0,   0.0,   1.0
    );
    
    
    float3 forward = normalize(b.velocity);
    float theta = asin(clamp(forward.y, -1.0f, 1.0f));
    float phi = -atan2(forward.x, forward.z);
    
    float4x4 yawMatrix = float4x4
    (
        cos(phi), 0.0, -sin(phi), 0.0,
        0.0, 1.0, 0.0, 0.0,
        sin(phi), 0.0, cos(phi), 0.0,
        0.0, 0.0, 0.0, 1.0
    );
    
    float4x4 pitchMatrix = float4x4
    (
        1.0, 0.0, 0.0, 0.0,
        0.0, cos(theta), sin(theta), 0.0,
        0.0, -sin(theta), cos(theta), 0.0,
        0.0, 0.0, 0.0, 1.0
    );
    
    float4x4 rotationMatrix = mul(yawMatrix, pitchMatrix);
    
    float4x4 translationMatrix = float4x4
    (
        float4(1.0, 0.0, 0.0, b.position.x + offset.x),
        float4(0.0, 1.0, 0.0, b.position.y + offset.y),
        float4(0.0, 0.0, 1.0, b.position.z + offset.z),
        float4(0.0, 0.0, 0.0, 1.0)
    );
    
    result = mul(result, scaleMatrix);
    result = mul(result, translationMatrix);
    result = mul(result, rotationMatrix);
    
    matrices[id] = result;
}